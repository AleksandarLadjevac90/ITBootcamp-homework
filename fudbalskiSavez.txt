import java.sql.*;

public class FudbalskiSavez {
	String connectionString;
	Connection con;
	
	public FudbalskiSavez(String connectionString) {
		this.connectionString = connectionString;
	}
	
	public void connect() {
		try {
			con = DriverManager.getConnection(connectionString);
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	public void disconnect() {
		try {
			if (con != null && !con.isClosed()) {
				con.close();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	public void imeFudbaleraTim() throws SQLException {
		String upit = "SELECT Fudbaler.Ime, Tim.Naziv FROM Fudbaler JOIN Tim ON Fudbaler.IdTim = Tim.IdTim";

		Statement statement = con.createStatement();
		ResultSet resultSet = statement.executeQuery(upit);
		
		if (!resultSet.isBeforeFirst()) {
			System.out.println("Nema rezultata");
			return;
		}
		
		do {
			String imeFudbalera = resultSet.getString("Ime");
			String nazivTima = resultSet.getString("Naziv");
			System.out.println(imeFudbalera.concat(" - ")
					.concat(nazivTima));
		} while(resultSet.next());
	}
	
	public void fudbaleriManchestera() throws SQLException {
		String upit = " SELECT Fudbaler.Ime"
				    + " From Fudbaler"
				    + " JOIN Tim ON Fudbaler.IdTim= Tim.IdTim"
				    + " WHERE Tim.Naziv = ?";
		
		PreparedStatement statement = con.prepareStatement(upit);
		statement.setString(1, "Manchester United");
		ResultSet result = statement.executeQuery();
		
		if(!result.isBeforeFirst()) {
			System.out.println("Nema rezultata!");
			return;
		}
		
		while(result.next()) {
			String imeFudbalera = result.getString(1);
			System.out.println(imeFudbalera);
		}
	}
	public void fudbalerNajviseGolova() throws SQLException {
		String upit = " SELECT Fudbaler.Ime, count(Gol.IdGol) as `broj_golova`"
				    + " FROM Fudbaler"
				    + " JOIN Gol ON Fudbaler.IdFud = Gol.IdFud"
				    + " GROUP BY Fudbaler.Ime"
				    + " ORDER BY `broj_golova` DESC LIMIT 1";
		
		Statement statement = con.createStatement();
		ResultSet result = statement.executeQuery(upit);
		if(!result.isBeforeFirst()) {
			System.out.println("Nema rezultata!");
			return;
		}
		
		System.out.println(result.getString(1));
	}
	public void kartoni() throws SQLException {
		String upit = " SELECT"
				    + " Fudbaler.Ime, count(`zuti_karton`.IdFud) as 'zuti karton', count(`crveni_karton`.IdFud) as'crveni karton'"
				    + " From"
				    + " Fudbaler"
				    + " Left Join karton`zuti_karton` ON Fudbaler.IdFud = `zuti_karton`.IdFud AND `zuti_karton`.Tip = 'zuti karton'"
				    + " Left Join karton`crveni_karton` ON Fudbaler.IdFud = `crveni_karton`.IdFud AND `crveni_karton`.Tip = 'crveni karton'"
				    + " Group by Fudbaler.IdFud";
		Statement statement =con.createStatement();
		ResultSet result = statement.executeQuery(upit);
		if(!result.isBeforeFirst()) {
			System.out.println("Nema rezultata!");
			return;
		}
		System.out.println("Ime fudbalera " + "-" + "Broj zutih karti" + "-" + "Broj crvenih karti");
		while(result.next()) {
			String imeFudbalera = result.getString(1);
			Integer brojZutihKarti = result.getInt(2);
			Integer brojCrvenihKarti = result.getInt(3);
			System.out.println(imeFudbalera + " - " + brojZutihKarti + " - " + brojCrvenihKarti );
		}
	} 
	
	
	public void gradoviGdeJeIgraoFudbaler(Integer IdFudbalera) throws SQLException {
		String upit = "SELECT Tim.Mesto as `Domacin`"
				+ " FROM Fudbaler"
				+ " JOIN Igrao ON Fudbaler.IdFud = Igrao.IdFud"
				+ " JOIN Utakmica ON Igrao.IdUta = Utakmica.IdUta"
				+ " JOIN Tim ON Utakmica.IdDomacin = Tim.IdTim"
				+ " WHERE Fudbaler.IdFud = ?"
				+ " AND Utakmica.IdDomacin = Fudbaler.IdTim";
		
		PreparedStatement statement = con.prepareStatement(upit);
		
		statement.setInt(1, IdFudbalera);
		
		ResultSet resultSet = statement.executeQuery();

		if (!resultSet.isBeforeFirst()) {
			System.out.println("Nema rezultata");
			return;
		}
		
		do {
			String mestoDomacin = resultSet.getString(1);
			System.out.println(mestoDomacin);
		} while(resultSet.next());
	}
	
}
